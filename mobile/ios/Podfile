# Resolve react_native_pods.rb with node to allow for hoisting
source 'https://github.com/CocoaPods/Specs.git'
def node_require(script)
  node_modules_path = File.expand_path('../../node_modules', __dir__)
  require Pod::Executable.execute_command('node', [
    '-p',
    "require.resolve('#{script}', {paths: ['#{node_modules_path}']})"
  ]).strip
end

node_require('react-native/scripts/react_native_pods.rb')
node_require('react-native-permissions/scripts/setup.rb')

platform :ios, min_ios_version_supported # or higher if your project requires

use_modular_headers!

prepare_react_native_project!

setup_permissions([
  'AppTrackingTransparency',
  'Notifications',
])

# Firebase SDK version - updated to latest compatible version
# $FirebaseSDKVersion = '10.24.0'

# Set static frameworks for all targets
use_frameworks! :linkage => :static
$RNFirebaseAsStaticFramework = true

abstract_target 'SharedPods' do

  pod 'GoogleUtilities'
  
  target 'pomoAI' do
    config = use_native_modules!
    
    # Firebase dependencies
    pod 'Firebase'
    pod 'FirebaseAuth'
    pod 'FirebaseCore'
    pod 'FirebaseCrashlytics'
    pod 'FirebaseCoreExtension'
    pod 'FirebaseInstallations'
    pod 'GoogleDataTransport'
    pod 'nanopb'
    pod 'FirebaseSessions'
    pod 'FirebaseAuthInterop'
    pod 'FirebaseAppCheckInterop'
    pod 'RecaptchaInterop'

    use_react_native!(
      :path => config[:reactNativePath],
      :hermes_enabled => true,
      :fabric_enabled => false,
      :app_path => "#{Pod::Config.instance.installation_root}/.."
    )

    post_install do |installer|
      react_native_post_install(
        installer,
        config[:reactNativePath],
        :mac_catalyst_enabled => false
      )
  
      installer.pods_project.targets.each do |target|
        target.build_configurations.each do |config|
          config.build_settings['SWIFT_VERSION'] = '5.0'
         
          # ✅ Fix: arm64 simulator
          config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
          
          # ✅ Fix Firebase Swift header issues - ensure proper module generation
          if ['FirebaseAuth', 'FirebaseCore', 'FirebaseInstallations', 'FirebaseMessaging'].include? target.name
            config.build_settings['DEFINES_MODULE'] = 'YES'
            config.build_settings['SWIFT_INSTALL_OBJC_HEADER'] = 'YES'
            config.build_settings['SWIFT_OBJC_INTERFACE_HEADER_NAME'] = "#{target.name}-Swift"
          end

          # ✅ Hermes debugger support
          if target.name == 'hermes-engine'
            config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
            config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'HERMES_ENABLE_DEBUGGER=1'
            config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
            config.build_settings['OTHER_CFLAGS'] << '-DRCT_NO_INSPECTOR=1'
          end

          # ✅ Reanimated: c++17
          if target.name == 'RNReanimated'
            config.build_settings['C++_STANDARD'] = 'c++17'
          end
        end
      end
      
      # ✅ Patch Firebase header to prevent Swift header import
      firebase_header_path = File.join(installer.sandbox.pod_dir('Firebase'), 'Firebase', 'Sources', 'Public', 'Firebase', 'Firebase.h')
      if File.exist?(firebase_header_path)
        header_content = File.read(firebase_header_path)
        # Comment out the FirebaseAuth-Swift.h import
        patched_content = header_content.gsub(/#import <FirebaseAuth\/FirebaseAuth-Swift\.h>/, '// #import <FirebaseAuth/FirebaseAuth-Swift.h>')
        File.write(firebase_header_path, patched_content)
        puts "✅ Patched Firebase.h to prevent Swift header import"
      end
    end
  end

  target 'ImageNotification' do
    pod 'Firebase/Messaging'
    pod 'SDWebImage'
  end
end
